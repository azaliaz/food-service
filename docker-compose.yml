version: '3.8'

services:
  postgres:
    networks:
      - network-backend
    container_name: postgres
    restart: always
    image: postgres:alpine  
    environment:
      - POSTGRES_DB=testdb
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 60s
      timeout: 20s
      retries: 1
    volumes:
      - postgres:/data/postgres
    env_file:
      - api/.env
    ports:
      - 5432:5432
  migrate:
    networks:
      - network-backend
    container_name: migrate
    image: migrate/migrate:v4.15.2
    profiles:  ["tools"]
    volumes:
      - ./api/migrations:/migrations
    entrypoint: [
      "migrate",
      "-path",
      "/migrations",
      "-database",
      "postgres://testuser:testpassword@postgres:5432/testdb?sslmode=disable",
    ]
    command: ["up"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
  api:
    networks:
      - network-backend
    container_name: api
    build:
      context: ./api/
      dockerfile: Dockerfile
    command: ./main 
    ports:
      - 3000:3000
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
    env_file:
      - api/.env
  frontend:
    networks:
      - network-backend
    container_name: frontend
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - 8888:8888
    depends_on:
      - api
    restart: on-failure
volumes:
  postgres: null
networks:
  network-backend: